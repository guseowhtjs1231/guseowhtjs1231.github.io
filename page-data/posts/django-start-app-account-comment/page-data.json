{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/django-start-app-account-comment","result":{"data":{"markdownRemark":{"id":"26db72fb-40a8-5e21-8667-a6868b2597d0","html":"<p><img src=\"/media/capture1.png\" alt=\"capture1.png\"></p>\n<p>휴 오늘 주옥같은 멘토의 피드백을 도강하고 완성한 나의 기능들… 여러 곳 짜집기를 했지만(무에서 유를 창조하진 못함ㅜㅜ) 그래도 나만의 스타일로 바꾸고 여러 에러들을 잡으려고 노력 많이 했다. 내가 생각한 에러들은 다 막았다. 적당히 성취감을 느끼는 작업이였다. ㅎㅎ</p>\n<h2 id=\"회원가입-기능\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EA%B8%B0%EB%8A%A5\" aria-label=\"회원가입 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 기능</h2>\n<p>지난 번에 올렸던 기능들을 갈아엎을 건 엎고 했는데 비슷한 것도 많이 있다. 일단 첫번째로 tree를 올리겠다.</p>\n<p>두가지의 앱을 만들었다.</p>\n<ul>\n<li>account</li>\n<li>comment</li>\n</ul>\n<p>그리고 프로젝트의 이름은 westa 이다.</p>\n<p>회원가입 기능은 account라는 앱으로 만들었고 sign-up과 sign-in 두가지 메소드를 만들었다.</p>\n<p>일단 첫번째로  </p>\n<h3 id=\"modelspy\" style=\"position:relative;\"><a href=\"#modelspy\" aria-label=\"modelspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>models.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\n\nfrom django.db import models\nfrom django.conf import settings\nfrom django.utils import timezone\n\nclass  Account(models.Model):\n\tname = models.CharField(max_length = 50)\n\temail = models.CharField(max_length = 100, unique=True)\n\tpassword = models.CharField(max_length = 300)\n\tcreated_at = models.DateTimeField(auto_now_add = True)\n\tupdated_at = models.DateTimeField(auto_now = True)\n\n\tclass  Meta:\n\t\tdb_table = &#39;account_account&#39;</code></pre></div>\n<p>예전부터 여러번 말했는데,</p>\n<p>models.py 는 데이터베이스에 넣을 형식들을 정해주는 곳이다.</p>\n<p>내가 account라는 앱에서 받을 데이터들은 총 5가지이다. (name, email, password, created_at, updated_at)</p>\n<p>meta클래스로 db_table 이름을 지정해준다. 사실 메타 클래스의 indentation을 잘 못 넣어줘서 장고에서 지정한 이름으로 테이블이 만들어졌다. 그게 account_account이다. 그래서 저렇게 지정한 척 했다^^.</p>\n<p>두번째로,</p>\n<p>### Views.py</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\n\nimport json    #먼저 라이브러리 받아주고\n\n\nfrom django.views import View\nfrom django.http import JsonResponse, HttpResponse      #장고 내장모듈\n\nfrom .models import Account     # 내가 만든 모듈 순서로 넣는다.\n\nclass  SignUpView(View):    #회원가입 기능의 시작!!\n\tdef  post(self, request):   # 정보들을 밀어넣을 때에!!어떻게 할 것인지 정의\n\t\ttry:            \t\t# 일단 Body의 정보들을 json.loads로 불는 것을 data에 정의를 한다.\n\t\t\tdata = json.loads(request.body)\n\t\t\tif Account.objects.filter(email =data[&#39;email&#39;]).exists(): \n\t\t\t\treturn JsonResponse({&quot;message&quot;:&quot;ALREADY_SIGNED_UP_EMAIL&quot;}, status=400)\n\t\t\tAccount.objects.create(\n\t\t\t\tname = data[&#39;name&#39;],\n\t\t\t\temail = data[&#39;email&#39;],\n\t\t\t\tpassword = data[&#39;password&#39;],\n                ).save()\n\t\t\t#복잡한 것 같지만 Account.objects에 필터기능을 써서 email이 있을 경우 &quot;ALREADY&quot;메시지를 출력\n            #else니까 등록된 이메일이 없을 경우 정상적으로 진행!! 아까 모델스에 정의했던 것들을 데이터로 받음 그리고 세이브\n\t\t\treturn HttpResponse(status=200)\n\t\t#정상 작동 코드 200을 리턴해줌\n        except  KeyError:\n\t\t\treturn JsonResponse({&quot;message&quot;:&quot;NO_DATA_ENTERED&quot;}, status=405)\n\t\t\t\t\ndef  get(self, request):\n\tuser_data = Account.objects.values()\n\treturn JsonResponse({&#39;account&#39;:list(user_data)}, status=200)\n#사실 이기능은 여기서 크게 필요는 없지만 초반에 실험단계일 때 넣었던 것. get으로 땡겼을 때 가입된 이메일과 이름 비밀번호를 리턴\n\nclass  SignInView(View):\n\tdef  post(self, request):\n\t\ttry:\n\t\t\tdata = json.loads(request.body)\n\t\t\ttry:\n\t\t\t\tif Account.objects.filter(email = data[&#39;email&#39;]).exists():\n\t\t\t\t\tuser = Account.objects.get(email=data\\[&#39;email&#39;])\n\t\t\t\t\tif user.password == data[&#39;password&#39;]:\n\t#이게 좀 복잡한데 이메일이 같을 경우 패스워드를 비교한다. 패스워드가 있으면 정상 200코드 리턴!! 없으면 아래의 순서대로 오류 메시지를 내보냄\n    #하지만 비밀번호를 잘못쳤는지 이메일을 잘못쳤는지는 알려주지 않음. 내부적으로는 코드로 분류를 하여 핸들한다.\n                        return HttpResponse(status=200)\n\t\t\t\t\t\n                    return JsonResponse({&quot;message&quot;:&quot;WRONG_ID_OR_PASSWORD&quot;},status=401)\n\t\t\t\t\n                return JsonResponse({&quot;message&quot;:&quot;WRONG_ID_OR_PASSWORD&quot;},status=400)\n\n\t\t\texcept  KeyError:\n\t\t\t\treturn JsonResponse({&quot;message&quot;:&quot;INVALID_KEYS&quot;}, status=400)\n\t\texcept  KeyError:\n\t\t\treturn JsonResponse({&quot;message&quot;:&quot;NO_DATA_ENTERED&quot;}, status=405)</code></pre></div>\n<p>데이터들을 받는 어떻게 보면 api를 핸들하는 views.py 다.</p>\n<p>구구절절한 설명을 덧붙였다.</p>\n<p>그 다음으로 건드린 것은…</p>\n<h3 id=\"accounturlspy\" style=\"position:relative;\"><a href=\"#accounturlspy\" aria-label=\"accounturlspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>###account/urls.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\nfrom django.urls import path\nfrom .views import SignUpView, SignInView\n#URL을 이걸로 핸들해준다. import를 잘 해줄것\napp_name = &quot;account&quot;\n\nurlpatterns = [\n\tpath(&#39;/sign-up&#39;, SignUpView.as_view()),\n\tpath(&#39;/sign-in&#39;, SignInView.as_view()),\n]</code></pre></div>\n<h3 id=\"westaurlspy\" style=\"position:relative;\"><a href=\"#westaurlspy\" aria-label=\"westaurlspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>###westa/urls.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\n\nfrom django.urls import path, include\n\nurlpatterns = [\n\tpath(&#39;account&#39;,include(&#39;account.urls&#39;)),\n]\n#account 라는 단어를 끼고 있는 URL이라면 account.urls를 참조한다.</code></pre></div>\n<p>이로써 account sign-up과 sign-in기능이 구현되었다. 테스트를 해보면 다음과 같다.</p>\n<p><img src=\"/media/capture2.png\" alt=\"capture2.png\">\n<img src=\"/media/capture3.png\" alt=\"capture3.png\"></p>\n<hr>\n<p>이제</p>\n<h2 id=\"comment-app\" style=\"position:relative;\"><a href=\"#comment-app\" aria-label=\"comment app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>##comment app</h2>\n<p>이다.</p>\n<p>위와 같이</p>\n<p>models.py부터 건드려 본다.</p>\n<h3 id=\"commentmodelspy\" style=\"position:relative;\"><a href=\"#commentmodelspy\" aria-label=\"commentmodelspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>###comment/models.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\n\nfrom django.db import models\nfrom django.conf import settings\nfrom django.utils import timezone\n\n\nclass  Comment(models.Model):\n\tname = models.CharField(max_length = 50)\n\tcontents = models.CharField(max_length = 3000)\n\tcreated_at = models.DateTimeField(auto_now_add = True)\n\tupdated_at = models.DateTimeField(auto_now = True)\n#데이터양식들을 지정해줌.\n\tclass  Meta:\n\t\tdb_table = &#39;comment&#39;\n\t\t#데이터베이스의 테이블을 지정해줌 &#39;comment&#39;로.</code></pre></div>\n<h3 id=\"commentviewspy\" style=\"position:relative;\"><a href=\"#commentviewspy\" aria-label=\"commentviewspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>###comment/views.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\n\nimport json\n\nfrom django.views import View\nfrom django.http import JsonResponse, HttpResponse\n\nfrom .models import Comment\nfrom account.models import Account\n\n#가입된 사람의 이름만 받는 comment기능을 만들고 싶어서 Account를 account.models에서 import했다.\n#이름이 있을 경우에만 comment가 되고 아니면 가입부터하라는 에러메시지를 출력한다.\n#모든 에러를 잡으려고 노력하다보니.. 필요없는 부분도 많이 있을 것이다.\n#get같은경우는 comment가 없을 경우 노 코멘트라고 출력하게 했다. \n\nclass  CommentView(View):\n\tdef  post(self, request):\n\t\ttry:\n\t\t\tdata = json.loads(request.body)\n\t\t\tif Account.objects.filter(name = data[&#39;name&#39;]).exists():\n\t\t\t\tComment.objects.create(\n\t\t\t\t\tname = data[&#39;name&#39;],\n\t\t\t\t\tcontents = data[&#39;contents&#39;],\n                    ).save()\n\t\t\t\treturn HttpResponse(status=200)\n\t\t\treturn JsonResponse({&quot;message&quot;:&quot;SIGN_UP_FIRST&quot;}, status=400)\n\t# return JsonResponse({&quot;message&quot;:&quot;TRY_AGAIN&quot;}, status=401)\n\n\t\texcept  KeyError:\n\t\t\treturn JsonResponse({&quot;message&quot;:&quot;NO_DATA_ENTERED&quot;}, status=405)\n\t\t\n        except Account.DoesNotExist:\n\t\t\treturn JsonResponse({&quot;message&quot;:&quot;SIGN_UP_FIRST&quot;}, status=404)\n\n\tdef  get(self, request):\n\t\tcomment_data = Comment.objects.values()\n\t\tif  len(comment_data)==0:\n\t\t\treturn JsonResponse({&#39;Message&#39;:&#39;NO_COMMENTS&#39;}, status=404)\n\t\treturn JsonResponse({&#39;Comment&#39;:list(comment_data)},status=200)\n#get할 경우 comment의 리스트를 리턴한다.</code></pre></div>\n<h3 id=\"commenturlspy\" style=\"position:relative;\"><a href=\"#commenturlspy\" aria-label=\"commenturlspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>###comment/urls.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\n\nfrom django.urls import path\nfrom .views import CommentView\n\n#as you know commentview가 나오게 해준다.\n\napp_name = &quot;comment&quot;\nurlpatterns = [\n\tpath(&#39;&#39;, CommentView.as_view()),\n]</code></pre></div>\n<h3 id=\"westaurlspy-1\" style=\"position:relative;\"><a href=\"#westaurlspy-1\" aria-label=\"westaurlspy 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>###westa/urls.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\n\nfrom django.urls import path, include\n\nurlpatterns = [\n\tpath(&#39;account&#39;,include(&#39;account.urls&#39;)),\n\tpath(&#39;comment&#39;,include(&#39;comment.urls&#39;)),\n]\n#account 와  comment 두 app이 사이좋게 나란히 적혀있다.</code></pre></div>\n<p>위에서 까먹고 말 안한 것!!</p>\n<h3 id=\"westasettingspy\" style=\"position:relative;\"><a href=\"#westasettingspy\" aria-label=\"westasettingspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>###westa/settings.py</strong></h3>\n<p>에서 INSTALLED_APPS를 업데이트 해주는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python\n\nINSTALLED_APPS = [\n#\t&#39;django.contrib.admin&#39;,\n#\t&#39;django.contrib.auth&#39;,\n\t&#39;django.contrib.contenttypes&#39;,\n\t&#39;django.contrib.sessions&#39;,\n\t&#39;django.contrib.messages&#39;,\n\t&#39;django.contrib.staticfiles&#39;,\n\t&#39;account&#39;,\n\t&#39;comment&#39;\n]\n#django장고가 앱을 인식하게 해줌.</code></pre></div>\n<p>이로써 comment 기능의 구현이 끝났다. 잘 작동 되는지 확인 할 수 있다.</p>\n<p><img src=\"/media/capture4.png\" alt=\"capture4.png\"></p>\n<p>잡을 수 있는 에러들을 더 잡아야 하지만 사질 잘 모르겠다. 없다고 믿고 싶다.</p>","fields":{"slug":"/posts/django-start-app-account-comment","tagSlugs":["/tag/sunday/","/tag/today-i-did/"]},"frontmatter":{"date":"2020-05-17T20:32:37.121Z","description":"장고 로그인과 회원가입, 글쓰기 기능 구현 ","tags":["Sunday","TodayIDid"],"title":"TID-장고 글올리기, 회원가입, 로그인(Comment, Sign-up, Sign-in)기능 만들기","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/django-start-app-account-comment"}}}