{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Django-review","result":{"data":{"markdownRemark":{"id":"9febc8fc-3131-5531-9980-4e507b730621","html":"<h2 id=\"django는\" style=\"position:relative;\"><a href=\"#django%EB%8A%94\" aria-label=\"django는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django는</h2>\n<p>MVC &#x26; MTV</p>\n<ul>\n<li>Model</li>\n<li>View</li>\n<li>Control, Template(Django)</li>\n</ul>\n<p>어떻게 돌아가는지\n그림 출처:<a href=\"https://www.essenceandartifact.com/2012/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.essenceandartifact.com/2012/</a></p>\n<h2 id=\"django의-개념\" style=\"position:relative;\"><a href=\"#django%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-label=\"django의 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django의 개념</h2>\n<p>모델</p>\n<h2 id=\"project와-app\" style=\"position:relative;\"><a href=\"#project%EC%99%80-app\" aria-label=\"project와 app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project와 App</h2>\n<p>Project는 하나의 사이트라고 보면 되고 </p>\n<p>App은 하나의 기능들이다. </p>\n<p>내가 naver.com를 만들고 싶다. 그러면 그게 프로젝트가 되는 것이고</p>\n<p>각각의 이메일 기능, 뉴스 볼 수 있는 기능, 지식인 기능, 검색 기능 등이 하나의 App 이 되어 하나하나 따로 관리한다.</p>\n<p>django-admin startporject tutorial</p>\n<ul>\n<li>튜토리얼이라는 프로젝트 생성</li>\n</ul>\n<p>/manage.py startapp communit</p>\n<ul>\n<li>Polls라는 app을 생성</li>\n</ul>\n<p>우리가 자주 만지고 쓸 것은 </p>\n<p>models.py</p>\n<p>views.py</p>\n<p>tutorial/settings.py</p>\n<p>urls.py</p>\n<p>manage.py</p>\n<h3 id=\"settingspy\" style=\"position:relative;\"><a href=\"#settingspy\" aria-label=\"settingspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Settings.py</h3>\n<ul>\n<li>DEBUG : 디버그 모드 설정 (배포하기 전엔 꺼야 됨)</li>\n<li>INSTALLED_APPS : pip로 설치한 앱 또는 본인이 만든 app을 추가</li>\n<li>MIDDLEWARE_CLASSES : request와 response 사이의 주요 기능 레이어(보안 쪽)</li>\n<li>TEMPLATES :  django template 관련 설정, 실제 뷰(html, 변수)</li>\n<li>DATABASES : 데이터베이스 엔진의 연결 설정</li>\n<li>STATIC_URL : 정적 파일의 URL(css, javascript, image, etc.)</li>\n</ul>\n<h3 id=\"managepy\" style=\"position:relative;\"><a href=\"#managepy\" aria-label=\"managepy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Manage.py</h3>\n<ul>\n<li>프로젝트 관리 명령어 모음</li>\n<li>\n<p>주요 명령어</p>\n<ul>\n<li>startapp - 앱 생성</li>\n<li>runserver - 서버 실행</li>\n<li>createsuperuser - 관리자 생성</li>\n<li>makemigrations app - app의 모델 변경 사항 체크</li>\n<li>migrate - 변경 사항을 DB에 반영</li>\n<li>shell - 쉘을 통해 데이터를 확인</li>\n<li>collectstatic - static 파일을 한 곳에 모음</li>\n</ul>\n</li>\n<li>ex) /manage.py runserver 0.0.0.0:8080</li>\n</ul>\n<h3 id=\"article-app\" style=\"position:relative;\"><a href=\"#article-app\" aria-label=\"article app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Article APP</h3>\n<p>name</p>\n<p>title</p>\n<p>contents</p>\n<p>url</p>\n<p>email</p>\n<p>cdate</p>\n<p>app디렉터리 안에 url.py 속 urlpatterns에 내가 넣을 것들 추가해주고</p>\n<p>views.py에 가서 </p>\n<p>from django.shortcuts import render</p>\n<p>def write(request): #request는 사용자가 넣을 것</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  return render(request, &#39;write.html&#39;)#template write.html을 쓰겠단 소리.</code></pre></div>\n<p>해주고! 그리고 template 만들러 가면 됨</p>\n<p>wirte.html 파일 만들고 기본 뭐 넣고 싶은 대로 html형식 맞춰서 넣으면 됨. </p>\n<p>대충 옆에처럼 저렇게 적으면 연동이 다 된 것임.</p>\n<p>지금까지만 한 것으로는 localhost:8080/write 에는 hello django! 만 뜬다.</p>\n<p>이제 게시판 기능 모델을 사용하여서 폼을 넣어보자</p>\n<p>view.py에</p>\n<p>오른쪽처럼 코드를 끼워 넣자</p>\n<p>그리고 template에 저 폼을 설정해주는데 </p>\n<p>이거는 굳이 필요 없지만 html을 이렇게 해주자. 그러면 오른쪽 그림처럼 홈페이지 화면에 뜰 것이다.</p>\n<p>views.py  수정</p>\n<p>이렇게 if구문을 넣어준다.  만약 POST면 폼에 넣고 폼에 있는 데이터가 유효하면 데이터베이스에 폼을 세이브하고, 아니면 폼을 놔둔다.</p>\n<p>근데 이렇게 하고 그냥 홈페이지 가서 폼에 입력을 하고 저장을 하면 CSRF 뭐라고 하면서 금지된 접근이라고 함.(403이 뜸)</p>\n<p>그래서 write.html 가서 </p>\n<p>csrf 추가\n간단한 문구 , {% csrf_token %}을 추가해준다. 그리고 저장을 누르면 저장이 된다. 근데 저장이 되어도 그 화면은 그대로 떠있을 것이다.</p>\n<p>그러면 여기서 list화면을 만들어준다. 화면을 만들어야 하니까</p>\n<p>Views.py로 간다.</p>\n<p>Views.py에 추가된 list\n이렇게 마지막에 넣어주고</p>\n<p>template에  위의 그림에 나와있는 list.html을 만들어 줘야 한다.  근데 그전에 리스트를 가져와서 표시해줘야 하기 때문에 표시될 함수를 넣어주자.</p>\n<p>list가 나열될 수 있도록 articlelist를 추가했다.\n그리고 list.html(template)를 만들어 주자.(이거는 프론트 역할)</p>\n<p>저장된 글들이 표시될 리스트의 폼을 html형식으로 만들어줌</p>\n<p>unorderd list태그를 이용하여 폼을 만들어주었다.</p>\n<p>표시된 화면\n이렇게 나온다. </p>\n<p>그런데 여기 리스트에서 저 글을 보고 싶어 누를 수 있게 해주는 view기능을 추가할 것이다.</p>\n<p>다시 urls.py 가서 </p>\n<p>urlpatterns에 추가 된 view URL\n다시 Views에 가서 view를 정의해준다.</p>\n<p>뷰에 뷰를 정의해줌\n이제 어디갈지 딱 눈치챈 것과 같이 view.html를 만들고</p>\n<p>아까와 비슷하게 만들어 준다.</p>\n<p>그리고 저장한다.</p>\n<p>그리고 홈페이지 가서 view/하고 원하는 숫자를 넣으면 몇 번째 게시글을 보여준다.</p>\n<p>뷰기능이 추가되어 게시글을 보는 화면\n이제 list.html 가서 링크를 넣어주면 됨.</p>\n<p>그러면 이렇게 뙇 게시판이 만들어진다. </p>\n<p>반복 작업하면서 조금 외워진 것처럼 </p>\n<p>모델을 만들고 간단하게 데이터베이스에 접근이 가능하고</p>\n<p>url 가서 정규표현식으로 urlpatterns 가서 넣고(유저들이 접근 가능하게)</p>\n<p>그리고 views에 가서 리퀘스트받는 작업들을 정의해주고</p>\n<p>template가 필요하다면 html작업을 하여 연결시켜주면 </p>\n<p>브라우저에 뜨는 화면까지 완벽하게 된다. 그렇게 되면 유저들이 쓸 수 있는 홈페이지가 되는 것이다.</p>\n<p>장고라는 도구를 이용하여 뚝딱뚝딱 웹서비스를 만드는 작업을 해보았다. 영상을 캡처하면서 한 것이기 때문에 내가 한 것은 아니지만 하나하나 이해하면서 넘겼다. </p>\n<p>출처 :  <a href=\"https://www.youtube.com/channel/UCCZum2rAfq3SjjUFshYDZww\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/channel/UCCZum2rAfq3SjjUFshYDZww</a></p>","fields":{"slug":"/posts/Django-review","tagSlugs":["/tag/blog/","/tag/django/"]},"frontmatter":{"date":"2020-05-11T22:46:37.121Z","description":"간략하게 두편의 영상과 간단한 자료를 이용하여 쟝고 리뷰와 정리 ","tags":["Blog","Django"],"title":"TIL-쟝고 간단 정리(Django review)","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/Django-review"}}}