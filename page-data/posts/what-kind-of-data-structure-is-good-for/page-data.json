{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/what-kind-of-data-structure-is-good-for","result":{"data":{"markdownRemark":{"id":"66f69190-a25f-5b0f-b71b-fc62d1bca5b7","html":"<p>오후에 또 세션이 있네.</p>\n<p>데이터 구조란 무엇인지, 왜 중요한지, 그리고 데이터 구조의 종류 중 첫 번째로 Array와 Tuple에 대해 배워보도록 한다.</p>\n<ul>\n<li>Data Structure 의 개념 필요성, 그리고 다양한 종류의 자료구조에 대한 이해</li>\n<li>Array의 개념과 장점, 단점, 그리고 언제 사용하면 좋을지</li>\n<li>Tuple의 개념과 장넘, 단점, 그리고 언제 사용하면 좋을지</li>\n</ul>\n<p>5주간 배워나갈텐데 열심히 해보자~</p>\n<h1 id=\"a-자료-구조\" style=\"position:relative;\"><a href=\"#a-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0\" aria-label=\"a 자료 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A. 자료 구조</h1>\n<h3 id=\"1-data-structure자료-구조란\" style=\"position:relative;\"><a href=\"#1-data-structure%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0%EB%9E%80\" aria-label=\"1 data structure자료 구조란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Data Structure(자료 구조)란?</h3>\n<ul>\n<li>자료 구조란 데이터에 편리하게 접근하고 조작하기 위한 데이터를 저장하거나 조직하는 방법</li>\n<li>자료 구조의 종류에는 여러가지가 있다. 하지만 모든 목적에 부합하는 자료구조는 없다. 따라서 각각의 자료구조가 갖는 장점과 한계를 잘 이해하고 상황에 맞게 올바른 자료 구조를 선택하고 사용하는 것이 중요</li>\n<li>자료구조는 언어별로 지원하는 양상이 다르다.</li>\n<li>각 언어가 가진 자료구조의 종류와 그것에 대한 사용 방법을 익히는 것이 중요하지만, 무엇보다 각 자료구조의 본질과 컨셉을 이해하고 상황에 맞는 적절한 자료 구조를 선택하는 것이 중요</li>\n<li>언어별로 지원하는 자료구조의 양상이 다르더라도 개념을 올바르게 이해한다면 해당 언어에 맞추어서 사용만 하면 됨.</li>\n</ul>\n<h3 id=\"2-왜-자료-구조가-중요한가\" style=\"position:relative;\"><a href=\"#2-%EC%99%9C-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\"2 왜 자료 구조가 중요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 왜 자료 구조가 중요한가?</h3>\n<ul>\n<li>데이터에 맞는 적절한 자료 구조를 사용하는 것은 전체 개발 시스템에 굉장히 큰 영향을 끼치기 때문</li>\n<li>“코딩은 알고리즘과 자료구조, 이 두가지로 이루어진다”*</li>\n<li>\n<ul>\n<li>리누스 토르발스*</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-자료-구조의-분류\" style=\"position:relative;\"><a href=\"#3-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0%EC%9D%98-%EB%B6%84%EB%A5%98\" aria-label=\"3 자료 구조의 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 자료 구조의 분류</h3>\n<ul>\n<li>단순 구조(Primitive Data Structure) : 프로그래밍에서 사용되는 기본 데이터 타입</li>\n<li>비단순 구조(None-Primitive Data Structure : 단순한 데이터를 저장하는 구조가 아니라 여러 데이터를 목적에 맞게 효과적으로 저장하는 자료 구조</li>\n</ul>\n<h4 id=\"비단순-구조\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8B%A8%EC%88%9C-%EA%B5%AC%EC%A1%B0\" aria-label=\"비단순 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비단순 구조</h4>\n<ul>\n<li>선형 구조(Linear Data Structure) : 저장되는 자료의 전후 관계가 1:1(ex. List, Stacks, Queues)</li>\n<li>비선형 구조(Non-Linear Data Structure) : 데이터 항목 사이의 관계가 1:n 또는 n:m(ex. Graphs, Trees)</li>\n</ul>\n<h3 id=\"4-일반적으로-가장-자우-사용-되는-자료-구조\" style=\"position:relative;\"><a href=\"#4-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B0%80%EC%9E%A5-%EC%9E%90%EC%9A%B0-%EC%82%AC%EC%9A%A9-%EB%90%98%EB%8A%94-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0\" aria-label=\"4 일반적으로 가장 자우 사용 되는 자료 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 일반적으로 가장 자우 사용 되는 자료 구조</h3>\n<ul>\n<li>Array(List in Python)</li>\n<li>Tuple</li>\n<li>Set</li>\n<li>Dictionary</li>\n<li>Stack &#x26; Queue</li>\n<li>Tree</li>\n</ul>\n<h1 id=\"b-자료구조---arraylist\" style=\"position:relative;\"><a href=\"#b-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0---arraylist\" aria-label=\"b 자료구조   arraylist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B. 자료구조 - Array(list)</h1>\n<h3 id=\"1-정의\" style=\"position:relative;\"><a href=\"#1-%EC%A0%95%EC%9D%98\" aria-label=\"1 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 정의</h3>\n<ul>\n<li>JavaScript에서는 Array, Python 에서는 List</li>\n<li>Array(List)는 가장 기초적이고 단순하면서도 가장 자주 사용 되는 자료 구조이다.</li>\n</ul>\n<h3 id=\"2-array의-특징\" style=\"position:relative;\"><a href=\"#2-array%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"2 array의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Array의 특징</h3>\n<p>순차적으로 데이터를 저장하는 자료 구조</p>\n<ul>\n<li>Array의 가장 큰 특징은 순차적(orderd)으로 데이터를 저장한다는 점이다.</li>\n<li>자료구조에 저장하는 데이터는 일반적으로 요소(element)라고 한다.</li>\n<li>Array는 주로 서로 연결된 데이터들을 순차적으로 저장할 때 사용한다.</li>\n<li>순서가 상관 없더라도 서로 연결된 데이터들을 저장할 때 일반적으로 사용된다.</li>\n</ul>\n<h5 id=\"기타-특징\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%ED%8A%B9%EC%A7%95\" aria-label=\"기타 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 특징</h5>\n<ul>\n<li>삽입 순서대로 저장됨</li>\n<li>이미 생성된 리스트도 수정 가능(Mutable)</li>\n<li>동일한 값도 여러번 삽입 가능</li>\n<li>다중차원 배열(Multi-dimentional Array): Array의 요소가 Array가 될 수 있다.</li>\n</ul>\n<h3 id=\"3-array-내부-구조\" style=\"position:relative;\"><a href=\"#3-array-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"3 array 내부 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Array 내부 구조</h3>\n<p>Array는 순차적으로 데이터가 저장되기 때문에 순차적으로 번호를 지정할 수 있다. </p>\n<h3 id=\"4-단점\" style=\"position:relative;\"><a href=\"#4-%EB%8B%A8%EC%A0%90\" aria-label=\"4 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 단점</h3>\n<h6 id=\"4-1-요소-삭제-및-요소-추가-removing-or-adding-elements\" style=\"position:relative;\"><a href=\"#4-1-%EC%9A%94%EC%86%8C-%EC%82%AD%EC%A0%9C-%EB%B0%8F-%EC%9A%94%EC%86%8C-%EC%B6%94%EA%B0%80-removing-or-adding-elements\" aria-label=\"4 1 요소 삭제 및 요소 추가 removing or adding elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-1. 요소 삭제 및 요소 추가 (Removing or Adding Elements)</h6>\n<p>중간의 요소가 삭제 될 때나 중간에 요소가 추가가 될 때 그 뒤의 모든 요소들이 한칸 밀리거나 한칸 당겨져야 한다. 그렇기 때문에 다른 자료 구조 보다 작업시간이 좀 더 걸릴 수 있다. 그래서 정보가 자주 삭제되거나 자주 추가되는 데이터를 담기에는 Array(List)가 적절치 않다.</p>\n<h5 id=\"4-2-array-재조정array-resizing\" style=\"position:relative;\"><a href=\"#4-2-array-%EC%9E%AC%EC%A1%B0%EC%A0%95array-resizing\" aria-label=\"4 2 array 재조정array resizing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-2. Array 재조정(Array Resizing)</h5>\n<ul>\n<li>배열은 메모리가 순차적으로 채워지기 때문에 배열이 처음 생성될 때 어느 정도 메모리를 미리 할당한다.(Pre-allocation)</li>\n<li>할당된 메모리 이상으로 저장할 때에 재조정이 일어난다. 이때 순서대로 다시 할당하기 때문에 시간이 늘어난다.</li>\n<li>사이즈 예측이 안되는 데이터를 다루기에 적절치 않은 자료구조이다.</li>\n<li>대부분의 언어에서 배열의 메모리 pre-allocation과 resizing을 자동으로 실행함.</li>\n</ul>\n<h3 id=\"5-언제-사용하면-좋을까\" style=\"position:relative;\"><a href=\"#5-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"5 언제 사용하면 좋을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 언제 사용하면 좋을까</h3>\n<ul>\n<li>순차열적인 데이터를 저장할 때</li>\n</ul>\n<p>ex)주식 가격. 어제의 2만원가 오늘의 2만원이 다름>>값보다는 순서가 중요한 데이터</p>\n<ul>\n<li>다차원 데이터를 다룰 때 -> Multi-dimensional Array</li>\n<li>어떠한 특정 요소를 빠르게 읽어야 할 때</li>\n<li>데이터의 사이즈가 급변하게 자주 변하지 않을 때</li>\n<li>요소가 자주 삭제되거나 추가되지 않을 때</li>\n</ul>\n<h1 id=\"c-tuple\" style=\"position:relative;\"><a href=\"#c-tuple\" aria-label=\"c tuple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C. Tuple</h1>\n<h3 id=\"1-정의-1\" style=\"position:relative;\"><a href=\"#1-%EC%A0%95%EC%9D%98-1\" aria-label=\"1 정의 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 정의</h3>\n<ul>\n<li>List와 마찬가지로 데이터를 순차적으로 저장할 수 있는 순열 자료구조</li>\n<li>한 번 정의되고 나면 수정할 수 없음(immutable)</li>\n<li>2~3개 정도의 적은 수의 쇼규모 데이터를 저장할 때 많이 사용</li>\n<li>함수에서 리턴 값을 한 개 이상 리턴하고 싶을 때</li>\n</ul>\n<h3 id=\"2-장점\" style=\"position:relative;\"><a href=\"#2-%EC%9E%A5%EC%A0%90\" aria-label=\"2 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 장점</h3>\n<ul>\n<li>간단한 값을 빨리 표현하고 싶을 때</li>\n<li>함수에서 리턴 값을 한 개 이상 리턴하고 싶을 때(ex. 좌표)</li>\n<li>Array(List)보다 가볍고 메모리를 적게 사용함.</li>\n</ul>\n<h3 id=\"3-단점\" style=\"position:relative;\"><a href=\"#3-%EB%8B%A8%EC%A0%90\" aria-label=\"3 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 단점</h3>\n<ul>\n<li>데이터가 무슨 의미인지 명확하지 않음</li>\n<li>문맥보고 의미를 가정해야 함</li>\n<li>Named Tuple이 이런 단점을 극복하기 위해 있긴함(Python)</li>\n</ul>\n<h3 id=\"4-언제-사용하면-좋을까\" style=\"position:relative;\"><a href=\"#4-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"4 언제 사용하면 좋을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 언제 사용하면 좋을까</h3>\n<p> Array(List)를 쓰기에는 간단한 데이터들을 표현할 때 사용</p>","fields":{"slug":"/posts/what-kind-of-data-structure-is-good-for","tagSlugs":["/tag/data-strucutre/","/tag/session/","/tag/tuple/","/tag/array/","/tag/list/"]},"frontmatter":{"date":"2020-05-11T15:00:37.121Z","description":"각 데이터마다 적절한 자료구조가 무엇인지 생각하자! ","tags":["DataStrucutre","Session","Tuple","Array","List"],"title":"Session-자료 구조(Data Structure)란? , Array(List), Tuple","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/what-kind-of-data-structure-is-good-for"}}}