<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by John Ha]]></title><description><![CDATA[행복한 미래를 꿈꾸어 봅니다.]]></description><link>http://guseowhtjs1231.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 06 May 2020 05:58:53 GMT</lastBuildDate><item><title><![CDATA[Session- 웹은 으뜨케 작동하는가?(How does the web work?)]]></title><description><![CDATA[코딩을 알기 전에 알아야 할 건 알아야 하지 않겠는가..]]></description><link>http://guseowhtjs1231.github.io//posts/How-does-the-web-work</link><guid isPermaLink="false">http://guseowhtjs1231.github.io//posts/How-does-the-web-work</guid><pubDate>Wed, 06 May 2020 15:00:32 GMT</pubDate><content:encoded>&lt;p&gt;일단 호스팅 개념부터 짚고 간다.&lt;/p&gt;
&lt;h2 id=&quot;호스팅hosting-web-hosting-service&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%98%B8%EC%8A%A4%ED%8C%85hosting-web-hosting-service&quot; aria-label=&quot;호스팅hosting web hosting service permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;호스팅(Hosting, Web hosting service)&lt;/h2&gt;
&lt;p&gt;: 인터넷에 띄운다는 것은 홈페이지의 구성파일들이(html, css, js) 인터넷에 “항상” 연결되고, “절대”꺼지지 않는 호스트 컴퓨터(웹 서버)에 저장되어 있다가 사용자의 요청이 오면 언제든 응답.&lt;/p&gt;
&lt;p&gt;예) AWS ec2/S3, cafe24 호스팅 센터 등&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A web hosting service is a type of Internet hosting service that allows individuals and organizations to make their website accessible via the World Wide Web. Web hosts are comanies that provide space on a server owned or leased for use by clients, as well as providing Internet connectivity, typically in a data center&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HTML: 웹사이트 구조&lt;/p&gt;
&lt;p&gt;CSS : 스타일링&lt;/p&gt;
&lt;p&gt;JavaScript: Interaction&lt;/p&gt;
&lt;p&gt;간략 설명 그림&lt;/p&gt;
&lt;h2 id=&quot;ip&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ip&quot; aria-label=&quot;ip permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IP&lt;/h2&gt;
&lt;p&gt;IP 주소는 internet 으로 통신하는 각 device(컴퓨터, 통신장비)에 부여된 고유한 값.&lt;/p&gt;
&lt;p&gt;스마트폰이나 노트북부터 대규모 소매 웹 사이트의 콘텐츠를 서비스하는 서버에 이르기까지 인터넷상의 모든 컴퓨터는 숫자를 사용하여 서로를 찾고 통신하며, 이러한 숫자를 IP주소라고 한다. &lt;/p&gt;
&lt;p&gt;An Internet Protocol address (IP address) is a numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication.&lt;/p&gt;
&lt;h2 id=&quot;domain-domain-name&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#domain-domain-name&quot; aria-label=&quot;domain domain name permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Domain (Domain name)&lt;/h2&gt;
&lt;p&gt;문자(string)으로 된 고유 주소. 수많은 IP 주소를 사람이 외워서 접속할 수 없기 때문에 기억하기 쉽다.&lt;/p&gt;
&lt;p&gt;ex)www.naver.com , www.google.com &lt;/p&gt;
&lt;p&gt;A domain name is an identification string that defines a realm of administrative autonomy, authority or control within the Internet.&lt;/p&gt;
&lt;p&gt;도메인 구조&lt;/p&gt;
&lt;h2 id=&quot;dns-domain-name-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dns-domain-name-system&quot; aria-label=&quot;dns domain name system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DNS (Domain Name System)&lt;/h2&gt;
&lt;p&gt; DNS는 사람이 읽을 수 있는 도메인 이름을 머신이 읽을 수 있는 IP 주소로 변환.&lt;/p&gt;
&lt;p&gt;DNS는 이름과 숫자 간의 매핑을 관리하여 마치 전화번호부와 같은 기능을 한다. DNS서버는 이름에 대한 요청을 IP주소로 변환하여 최종 사용자가 도메인 이름을 웹 브라우저에 입력할 때 해당 사용자를 어떤 서버를 연결할 것인지를 제어. 이 요청을 쿼리라고 부른다.&lt;/p&gt;
&lt;p&gt;예) Amazon Route 53, Cafe24 도메인관리, 가비아 네임서버 관리&lt;/p&gt;
&lt;p&gt;*DNS 서버란 도메인과 서버를 연결해주는 중간 서버로, 도메인 이름을 인터넷상의 주소(IP 주소)로 변환시켜 원하는 컴퓨터를 찾아갈 수 있도록 함.&lt;/p&gt;
&lt;p&gt;대략 이런 느낌임.&lt;/p&gt;
&lt;p&gt;마지막으로&lt;/p&gt;
&lt;h2 id=&quot;배포deploy&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%ED%8F%ACdeploy&quot; aria-label=&quot;배포deploy permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배포(Deploy)&lt;/h2&gt;
&lt;p&gt;그동한 개발하던 것을 세상(인터넷상)에 공개하고 모든 사람들이 접근해서 볼 수 있게 하는 것을 의미.&lt;/p&gt;
&lt;figure&gt;
	&lt;blockquote&gt;
		&lt;footer&gt;
		&lt;p&gt;
			내 인생에 보증이란 없다. No co-sign in my life
		&lt;/p&gt;	
		&lt;cite&gt;— Youngbin John Ha.&lt;/cite&gt;
		&lt;/footer&gt;
	&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#header h1 a&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 300px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 80px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/media/cpu.svg&quot; alt=&quot;Test SVG&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Session-웹서비스에 대해서(about Web Service)]]></title><description><![CDATA[나는 꿈꾸고 상상한다. 누구나 원하는 것을 이루면 좋겠다라고]]></description><link>http://guseowhtjs1231.github.io//posts/a-session-what-is-webservice</link><guid isPermaLink="false">http://guseowhtjs1231.github.io//posts/a-session-what-is-webservice</guid><pubDate>Tue, 05 May 2020 17:00:32 GMT</pubDate><content:encoded>&lt;h1 id=&quot;쟝고---2세대형-웹프레임워크---백엔드-프론트엔드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9F%9D%EA%B3%A0---2%EC%84%B8%EB%8C%80%ED%98%95-%EC%9B%B9%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC---%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C&quot; aria-label=&quot;쟝고   2세대형 웹프레임워크   백엔드 프론트엔드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쟝고 - 2세대형 웹프레임워크  ( 백엔드 프론트엔드)&lt;/h1&gt;
&lt;p&gt;예전에는 서버개발자냐 아니냐  끝 나머지는 웹퍼블리셔 웹디자이너 뿐이였음&lt;/p&gt;
&lt;p&gt;리액트가 나오면서 각자의 영역이 뚜렷해짐.&lt;/p&gt;
&lt;p&gt;쟝고에서는&lt;/p&gt;
&lt;p&gt;models와 views가 중요함.&lt;/p&gt;
&lt;p&gt;+models - 프레임&lt;/p&gt;
&lt;p&gt;+views - 로직, 컨트롤러&lt;/p&gt;
&lt;p&gt;기본적으로 쟝고에서 이 3가지만 쓰면 됨.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;models&lt;/li&gt;
&lt;li&gt;urls.py&lt;/li&gt;
&lt;li&gt;views - controller&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;백엔드인 우리에게 중요한 것은.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API&lt;/li&gt;
&lt;li&gt;END Point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;쟝고의 가장 강력한 기능&lt;/p&gt;
&lt;p&gt;ORM &lt;/p&gt;
&lt;p&gt;Oriented-Relational Mapping&lt;/p&gt;
&lt;p&gt;API 설계/ 구현을 위해서 알아야 할 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Web, HTTP&lt;/li&gt;
&lt;li&gt;AWS,cloud환경 (서버)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;쿼리스트링 - 서버에게 요청하는 문자열 , 검색 시스템은 get이게 하는 것.&lt;/p&gt;
&lt;p&gt;RESTful&lt;/p&gt;
&lt;p&gt;HTTP&lt;/p&gt;
&lt;p&gt;API
를 만들어야 되는데 이 세가지의 규칙을 알아야 함.&lt;/p&gt;
&lt;p&gt;이 세가지의 맞춘 API가 개발되어야됨.&lt;/p&gt;
&lt;h2 id=&quot;restful&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#restful&quot; aria-label=&quot;restful permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RESTful&lt;/h2&gt;
&lt;p&gt;“Representational State Transfer” 의 약자&lt;/p&gt;
&lt;p&gt;자원을 이름(자원의 표현)으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미한다.&lt;/p&gt;
&lt;h2 id=&quot;rest구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rest%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;rest구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST구성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자원(Resource) - URI&lt;/li&gt;
&lt;li&gt;행위(Verb) - HTTP METHOD&lt;/li&gt;
&lt;li&gt;표현(Representations)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;rest의-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rest%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;rest의 특징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST의 특징&lt;/h2&gt;
&lt;h3 id=&quot;1-uniform-유니폼-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-uniform-%EC%9C%A0%EB%8B%88%ED%8F%BC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;1 uniform 유니폼 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) Uniform (유니폼 인터페이스)&lt;/h3&gt;
&lt;p&gt;Uniform Interface는 URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일을 말합니다.&lt;/p&gt;
&lt;h3 id=&quot;2-stateless-무상태성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-stateless-%EB%AC%B4%EC%83%81%ED%83%9C%EC%84%B1&quot; aria-label=&quot;2 stateless 무상태성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) Stateless (무상태성)&lt;/h3&gt;
&lt;p&gt;REST는 무상태성 성격을 갖습니다. 다시 말해 작업을 위한 상태정보를 따로 저장하고 관리하지 않습니다. 세션 정보나 쿠키정보를 별도로 저장하고 관리하지 않기 때문에 API 서버는 들어오는 요청만을 단순히 처리하면 됩니다. 때문에 서비스의 자유도가 높아지고 서버에서 불필요한 정보를 관리하지 않음으로써 구현이 단순해집니다.&lt;/p&gt;
&lt;h3 id=&quot;3-cacheable-캐시-가능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-cacheable-%EC%BA%90%EC%8B%9C-%EA%B0%80%EB%8A%A5&quot; aria-label=&quot;3 cacheable 캐시 가능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) Cacheable (캐시 가능)&lt;/h3&gt;
&lt;p&gt;REST의 가장 큰 특징 중 하나는 HTTP라는 기존 웹표준을 그대로 사용하기 때문에, 웹에서 사용하는 기존 인프라를 그대로 활용이 가능합니다. 따라서 HTTP가 가진 캐싱 기능이 적용 가능합니다. HTTP 프로토콜 표준에서 사용하는 Last-Modified태그나 E-Tag를 이용하면 캐싱 구현이 가능합니다.&lt;/p&gt;
&lt;h3 id=&quot;4-self-descriptiveness-자체-표현-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-self-descriptiveness-%EC%9E%90%EC%B2%B4-%ED%91%9C%ED%98%84-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;4 self descriptiveness 자체 표현 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) Self-descriptiveness (자체 표현 구조)&lt;/h3&gt;
&lt;p&gt;REST의 또 다른 큰 특징 중 하나는 REST API 메시지만 보고도 이를 쉽게 이해 할 수 있는 자체 표현 구조로 되어 있다는 것입니다.&lt;/p&gt;
&lt;h3 id=&quot;5-client---server-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-client---server-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;5 client   server 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) Client - Server 구조&lt;/h3&gt;
&lt;p&gt;REST 서버는 API 제공, 클라이언트는 사용자 인증이나 컨텍스트(세션, 로그인 정보)등을 직접 관리하는 구조로 각각의 역할이 확실히 구분되기 때문에 클라이언트와 서버에서 개발해야 할 내용이 명확해지고 서로간 의존성이 줄어들게 됩니다.&lt;/p&gt;
&lt;h3 id=&quot;6-계층형-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EA%B3%84%EC%B8%B5%ED%98%95-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;6 계층형 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) 계층형 구조&lt;/h3&gt;
&lt;p&gt;REST 서버는 다중 계층으로 구성될 수 있으며 보안, 로드 밸런싱, 암호화 계층을 추가해 구조상의 유연성을 둘 수 있고 PROXY, 게이트웨이 같은 네트워크 기반의 중간매체를 사용할 수 있게 합니다.&lt;/p&gt;
&lt;h3 id=&quot;rest-api-디자인-가이드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rest-api-%EB%94%94%EC%9E%90%EC%9D%B8-%EA%B0%80%EC%9D%B4%EB%93%9C&quot; aria-label=&quot;rest api 디자인 가이드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST API 디자인 가이드&lt;/h3&gt;
&lt;p&gt;중요한 2가지&lt;/p&gt;
&lt;h4 id=&quot;첫-번째-uri는-정보의-자원을-표현해야-한다리소스명은-동사보다는-명사를-사용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B2%AB-%EB%B2%88%EC%A7%B8-uri%EB%8A%94-%EC%A0%95%EB%B3%B4%EC%9D%98-%EC%9E%90%EC%9B%90%EC%9D%84-%ED%91%9C%ED%98%84%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%AA%85%EC%9D%80-%EB%8F%99%EC%82%AC%EB%B3%B4%EB%8B%A4%EB%8A%94-%EB%AA%85%EC%82%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;첫 번째 uri는 정보의 자원을 표현해야 한다리소스명은 동사보다는 명사를 사용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;첫 번째, URI는 정보의 자원을 표현해야 한다.(리소스명은 동사보다는 명사를 사용)&lt;/h4&gt;
&lt;h4 id=&quot;두-번째-자원에-대한-행위는-http-methodget-postputdelete로-표현한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%91%90-%EB%B2%88%EC%A7%B8-%EC%9E%90%EC%9B%90%EC%97%90-%EB%8C%80%ED%95%9C-%ED%96%89%EC%9C%84%EB%8A%94-http-methodget-postputdelete%EB%A1%9C-%ED%91%9C%ED%98%84%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;두 번째 자원에 대한 행위는 http methodget postputdelete로 표현한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;두 번째, 자원에 대한 행위는 HTTP Method(GET, POST,PUT,DELETE)로 표현한다.&lt;/h4&gt;
&lt;h2 id=&quot;주의할-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot; aria-label=&quot;주의할 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주의할 점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;슬래시 구분자(/)는 계층 관계를 나타내는 데 사용&lt;/li&gt;
&lt;li&gt;URI 마지막 문자로 슬래시(/)를 포함하지 않는다.&lt;/li&gt;
&lt;li&gt;하이픈(-)은 URI 가독성을 높이는 데 사용&lt;/li&gt;
&lt;li&gt;밑줄(_)은 URI에 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;URI 경로에는 소문자가 적합하다.&lt;/li&gt;
&lt;li&gt;파일 확장자는 URI에 포함시키지 않는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;http&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http&quot; aria-label=&quot;http permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP&lt;/h2&gt;
&lt;p&gt;request 와 response가 서로 주고받음. &lt;/p&gt;
&lt;p&gt;1.request
start line&lt;/p&gt;
&lt;p&gt;method - get, post, head, put , delete,&lt;/p&gt;
&lt;p&gt;get은 body에 데이터가없다&lt;/p&gt;
&lt;p&gt;post는 body에 데이터가 있다. 이렇게 하기러 한것이다.&lt;/p&gt;
&lt;p&gt;response될 타겟팅 목표가 엔드포인트 &lt;/p&gt;
&lt;p&gt;쟝고의 urls.py가 엔드포인트를 만듬.&lt;/p&gt;
&lt;p&gt;headers&lt;/p&gt;
&lt;p&gt;body&lt;/p&gt;
&lt;p&gt;json을 주고받을 수 있음.&lt;/p&gt;
&lt;p&gt;2.response - 요청에 대한 응답
status line. 상태라인? http version , 상태코드.&lt;/p&gt;
&lt;p&gt;응답코드가 있다.200 정상, 404, 401, 500(알수없는에러) 등등&lt;/p&gt;
&lt;p&gt;header에 담기는 것들&lt;/p&gt;
&lt;p&gt;cookies
인증 토큰&lt;/p&gt;
&lt;p&gt;body&lt;/p&gt;
&lt;p&gt;데이터를 바디에 실어 보냄.&lt;/p&gt;
&lt;p&gt;데이터타입 xml을 많이 썼으나 지금은 json(데이터타입)을 씀.&lt;/p&gt;
&lt;p&gt;외우면 좋을 것 &lt;/p&gt;
&lt;p&gt;가상환경만들기&lt;/p&gt;
&lt;p&gt;매 프로젝트마다 새로만들어서 하는 것이 좋음.&lt;/p&gt;
&lt;p&gt;conda create -n test03 python=3.8&lt;/p&gt;
&lt;p&gt;하고&lt;/p&gt;
&lt;p&gt;conda activate test03&lt;/p&gt;
&lt;p&gt;그리고 &lt;/p&gt;
&lt;p&gt;pip install django 하고 가상환경&lt;/p&gt;
&lt;p&gt;django-admin&lt;/p&gt;
&lt;p&gt;으로 설치확인&lt;/p&gt;
&lt;p&gt;명령어 확인&lt;/p&gt;
&lt;p&gt;outer test03은 쓸모없고&lt;/p&gt;
&lt;p&gt;inner test03이 중요한 것.&lt;/p&gt;
&lt;p&gt;manage.py가 있는 곳이 물리적 최상위 공간&lt;/p&gt;
&lt;p&gt;web server service 할 때 &lt;/p&gt;
&lt;p&gt;wsgi.py&lt;/p&gt;
&lt;p&gt;web service gateway interface가 필요함.&lt;/p&gt;
&lt;p&gt;파이썬을 웹서비스하려면 필요함&lt;/p&gt;
&lt;p&gt;asgi는 파이썬 3.0부터 나옴 비동기 통신 서버를 위해서 나옴. 사례가 많지 않음.&lt;/p&gt;
&lt;p&gt;assingcorss gateway interface?&lt;/p&gt;
&lt;p&gt;세팅스를 봄.&lt;/p&gt;
&lt;p&gt;debug는 개발때에는 true이고 배포하고나서는 false&lt;/p&gt;
&lt;p&gt;installed app&lt;/p&gt;
&lt;p&gt;어드민과 어스는 비활성화 주석처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;admin  - 관리자 기능&lt;/li&gt;
&lt;li&gt;auth  - 로그인 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;middleware&lt;/p&gt;
&lt;p&gt;csrf - 페이지 위변조하는지 체킹하는 보안기능&lt;/p&gt;
&lt;p&gt;auth - 로그인 기능&lt;/p&gt;
&lt;p&gt;비활성화&lt;/p&gt;
&lt;p&gt;root_urlconf = ‘test03.urls’  기본 기준이 되는 url&lt;/p&gt;
&lt;p&gt;템플릿은 페이지만들때 쓰는거라서 넘어감 &lt;/p&gt;
&lt;p&gt;wsgi_application 은 웹서비스할 때 필요한 것.&lt;/p&gt;
&lt;p&gt;databases는 데이터베이스 내가 뭐쓸지 뭘로 관리할지.&lt;/p&gt;
&lt;p&gt;auth&lt;em&gt;password&lt;/em&gt;validators&lt;/p&gt;
&lt;p&gt;비밀번호 체크하는 검사하는 기준들 . 우리는 사용안함. 할꺼면 따로 만들고.&lt;/p&gt;
&lt;p&gt;Use_tz - false하면 내 컴퓨터시간으로 됨.&lt;/p&gt;
&lt;h3 id=&quot;vim-단축키&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vim-%EB%8B%A8%EC%B6%95%ED%82%A4&quot; aria-label=&quot;vim 단축키 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vim 단축키&lt;/h3&gt;
&lt;p&gt;+dd 는 그라인 삭제&lt;/p&gt;
&lt;p&gt;+yy는 그라인 복사&lt;/p&gt;
&lt;p&gt;+p는 붙여넣기&lt;/p&gt;
&lt;p&gt;+u는 undo&lt;/p&gt;
&lt;p&gt;+cc는 오려두기&lt;/p&gt;
&lt;h3 id=&quot;쟝고-서버가동-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9F%9D%EA%B3%A0-%EC%84%9C%EB%B2%84%EA%B0%80%EB%8F%99-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;쟝고 서버가동 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쟝고 서버가동 방법&lt;/h3&gt;
&lt;p&gt;python manage.py runserver&lt;/p&gt;
&lt;p&gt;런서버는 데이터베이스없으며 ㄴ안됨&lt;/p&gt;
&lt;p&gt;내컴퓨터를 가르키는 localhost or  127.0.0.1&lt;/p&gt;
&lt;p&gt;DNS&lt;/p&gt;
&lt;p&gt;도메인네임을 ip로 바꾸는 시스템.&lt;/p&gt;
&lt;figure&gt;
	&lt;blockquote&gt;
		&lt;p&gt;
			세상에 내 주머니에 돈꼽아주려는 사람은 없다.
		&lt;/p&gt;
		&lt;footer&gt;
			&lt;cite&gt;- Misuk Lee.&lt;/cite&gt;
		&lt;/footer&gt;
	&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL-쟝고 튜토리얼 탐험기02(Explore Django tutorial02)-장고 설계 철학,  Polls.app 만들기]]></title><description><![CDATA[German inventor Johannes Gutenberg developed a method of movable type and used it to create one of the western world’s first major printed books, the “Forty–Two–Line” Bible.]]></description><link>http://guseowhtjs1231.github.io//posts/exploring-the-django-tutorial</link><guid isPermaLink="false">http://guseowhtjs1231.github.io//posts/exploring-the-django-tutorial</guid><pubDate>Fri, 01 May 2020 15:30:03 GMT</pubDate><content:encoded>&lt;p&gt;쟝고 접한지 두번째 날이다. 화이팅&lt;/p&gt;
&lt;h2 id=&quot;먼저-장고의-설계-철학을-먼저-짚고-가자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A8%BC%EC%A0%80-%EC%9E%A5%EA%B3%A0%EC%9D%98-%EC%84%A4%EA%B3%84-%EC%B2%A0%ED%95%99%EC%9D%84-%EB%A8%BC%EC%A0%80-%EC%A7%9A%EA%B3%A0-%EA%B0%80%EC%9E%90&quot; aria-label=&quot;먼저 장고의 설계 철학을 먼저 짚고 가자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;먼저 장고의 설계 철학을 먼저 짚고 가자.&lt;/h2&gt;
&lt;h3 id=&quot;일반&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BC%EB%B0%98&quot; aria-label=&quot;일반 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;일반&lt;/h3&gt;
&lt;p&gt;느슨한 결합 - 느슨한 결합, 탄탄한 응집 : 프레임워크의 각 계층은 정말로 서로 필요하기 전까지는 서로 “알지 못해야” 한다.&lt;/p&gt;
&lt;p&gt;적은 코드 - 틀에 박힌 코드 배제 최소한의 코드 활용 , 파이썬의 동적 기능을 최대로 활용&lt;/p&gt;
&lt;p&gt;신속한 개발 - 빠른 웹개발 추구&lt;/p&gt;
&lt;p&gt;반복하지 말 것 - 중복성은 나쁜 것 , 정규화는 좋은 것 : 최소한의 것들로 최대한의 것을 만든다.&lt;/p&gt;
&lt;p&gt;명시적인 것이 묵시적인 것보다 낫다.&lt;/p&gt;
&lt;p&gt;일관성&lt;/p&gt;
&lt;h3 id=&quot;모델&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;모델 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델&lt;/h3&gt;
&lt;p&gt;명시적인 것이 묵시적인 것보다 낫다.&lt;/p&gt;
&lt;p&gt;모든 관련 도메인 로직을 포함하라 - 모델을 이해하는 데 요구되는 모든 정보가 모델 내에 있어야 한다.&lt;/p&gt;
&lt;h3 id=&quot;데이터베이스-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-api&quot; aria-label=&quot;데이터베이스 api permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스 API&lt;/h3&gt;
&lt;p&gt;SQL 효율성&lt;/p&gt;
&lt;p&gt;간결하고 강력한 구문&lt;/p&gt;
&lt;p&gt;필요할 경우 SQL 문을 직접 장석하기 쉬워야 함.&lt;/p&gt;
&lt;h3 id=&quot;url-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#url-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;url 설계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;URL 설계&lt;/h3&gt;
&lt;p&gt;느슨한 결합&lt;/p&gt;
&lt;p&gt;무한한 유연성&lt;/p&gt;
&lt;p&gt;모범 사례를 장려&lt;/p&gt;
&lt;p&gt;명확한 URL&lt;/p&gt;
&lt;h3 id=&quot;템플릿-시스템&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot; aria-label=&quot;템플릿 시스템 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;템플릿 시스템&lt;/h3&gt;
&lt;p&gt;표현과 로직을 분리&lt;/p&gt;
&lt;p&gt;중복을 배제&lt;/p&gt;
&lt;p&gt;HTML과의 분리&lt;/p&gt;
&lt;p&gt;XML을 템플릿 언어로 사용하지 말 것&lt;/p&gt;
&lt;p&gt;디자이너가 코딩 능력이 있는 것으로 가정&lt;/p&gt;
&lt;p&gt;공백에 특별한 의미를 부여하지 말 것&lt;/p&gt;
&lt;p&gt;프로그래밍 언어를 발명하지 말 것&lt;/p&gt;
&lt;p&gt;안전과 보안&lt;/p&gt;
&lt;p&gt;확장성&lt;/p&gt;
&lt;h3 id=&quot;뷰&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B7%B0&quot; aria-label=&quot;뷰 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;뷰&lt;/h3&gt;
&lt;p&gt;단순성&lt;/p&gt;
&lt;p&gt;요청 객체의 사용&lt;/p&gt;
&lt;p&gt;느슨한 결합&lt;/p&gt;
&lt;p&gt;GET 과 POST를 구분&lt;/p&gt;
&lt;h3 id=&quot;캐시-프레임워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BA%90%EC%8B%9C-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;캐시 프레임워크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;캐시 프레임워크&lt;/h3&gt;
&lt;p&gt;적은 코드 &lt;/p&gt;
&lt;p&gt;일관성&lt;/p&gt;
&lt;p&gt;확장성&lt;/p&gt;
&lt;h2 id=&quot;database-setup&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#database-setup&quot; aria-label=&quot;database setup permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database setup&lt;/h2&gt;
&lt;p&gt;mysite/settings.py를 열고 쟝고 세팅을 해볼 수 있다.&lt;/p&gt;
&lt;p&gt;기본적으로 SQLite를 데이터베이스로 쓰는데 확장가능한 데이터베이스(PostgreSQL같은)것을 쓰고 싶다면 바꿀 수 있다.
DATABASES ‘default’에서 ENGIN을 바꾸고 NAME도 바꾸면 된다. 원하는 걸로.&lt;/p&gt;
&lt;p&gt;예로,&lt;/p&gt;
&lt;p&gt;django.db.backends.sqlite3&lt;/p&gt;
&lt;p&gt;django.db.backends.postgresql&lt;/p&gt;
&lt;p&gt;django.db.backends.mysql&lt;/p&gt;
&lt;p&gt;django.db.backends.oracle&lt;/p&gt;
&lt;p&gt;등등&lt;/p&gt;
&lt;p&gt;name - 나의 데이터베이스 이름. 절대경로로 할때 취급 될 이름. 기본값은 &lt;/p&gt;
&lt;p&gt;os.path.join(BASE_DIR, ‘db.sqlite3’) 이다.&lt;/p&gt;
&lt;p&gt;SQLite안쓰고 다른 데이터베이스를 쓰려면 일단 처음부터 고치고 가야하는데&lt;/p&gt;
&lt;p&gt;CREATE DATABASE database_name; 치고 하면 된다. 나는 기본값으로 쓸 것이기 때문에 패스한다.&lt;/p&gt;
&lt;p&gt;mysite/settings.py 에서 TIME_ZONE을 내가 지금 있는 타임존으로 설정해야한다.&lt;/p&gt;
&lt;p&gt;mysite/settings.py에서 INSTALLED_APPS의 기본값 의미.&lt;/p&gt;
&lt;p&gt;django.contrib.admin – The admin site. You’ll use it shortly.
django.contrib.auth – An authentication system.
django.contrib.contenttypes – A framework for content types.
django.contrib.sessions – A session framework.
django.contrib.messages – A messaging framework.
django.contrib.staticfiles – A framework for managing static files.
최소 하나의 데이터베이스 테이블을 응용프로그램들이 쓸 것이기 때문에 테이블을 작성해야한다. 그러기 전에 쳐야할 명령어&lt;/p&gt;
&lt;p&gt;$ python manage.py migrate&lt;/p&gt;
&lt;p&gt;이주 시키는 명령같은데.&lt;/p&gt;
&lt;p&gt;migrate 명령어는 setting.py안에 INSTALLED_APPS 세팅을 확인하고 데이터베이스 세팅되어 있는 것에 따라 필요한 데이터베이스 테이블을 만든다.  &lt;/p&gt;
&lt;p&gt;python manage.py migrate 실행 결과
각 이주들이 어플라이 되었다고 나온다.&lt;/p&gt;
&lt;p&gt;The migrate command will only run migrations for apps in INSTALLED_APPS.&lt;/p&gt;
&lt;p&gt;: migrate 명령어는 오직 INSTALLED_APPS의 앱들을 이주하기 위해 사용된다.&lt;/p&gt;
&lt;p&gt;두가지의 모델 (질문 과 선택)을 만들어야 되는데 질문은 공식 날짜를 가지고 있고 선택은 두가지의 필드를 가지고 있다. 하나는 글자로된 선택지이고 하나는 투표집계이다. 각 선택은 질문과 연관되어 있다.&lt;/p&gt;
&lt;p&gt;이러한 개념은 파이썬으로 표현되는데  polls/models.py을 편집해보자.&lt;/p&gt;
&lt;p&gt;polls/models.py&lt;/p&gt;
&lt;p&gt;class Question(models.Model):
question&lt;em&gt;text = models.CharField(max&lt;/em&gt;length=200)
pub_date = models.DateTimeField(‘date published’)&lt;/p&gt;
&lt;p&gt;class Choice(models.Model):
question = models.ForeignKey(Question, on&lt;em&gt;delete=models.CASCADE)
choice&lt;/em&gt;text = models.Charfield(max_length=200)
votes = models.IntergerField(default=0)&lt;/p&gt;
&lt;p&gt;이러한 각 모델들은 클래스로 인해 표현되는데 django.db.models.Model 의 subclasses이다. 각 모델은 클래스변수의 숫자를 가지는데 각 모델의 데이터베이스 필드를 나타낸다.&lt;/p&gt;
&lt;p&gt;데이터베이스의 각 필드는 클래스의 인스턴스로 표현된다. &lt;/p&gt;
&lt;p&gt;CharField 는 문자(Character)필드를, DateTimeField는 날짜와 시간(datetime)필드를 표현함. 이것은 각 필드가 어떤 자료형을 가질 수 있는지를 Django에게 말한다.&lt;/p&gt;
&lt;p&gt;각자의 Field 인스턴스의 이름(question&lt;em&gt;text or pub&lt;/em&gt;date)은 기계가 읽기 좋은 형식(machine-friendly format)의 데이터베이스 필드 이름이다. 이 필드명은 파이썬 코드에서 사용할 수 있으며 데이터베이스는 컬럼명으로 사용할 것이다.&lt;/p&gt;
&lt;p&gt;Field클래스의 생성자에 선택적인 첫번째 위치 인수를 전다랗여 사람이 읽기 좋은(human-readable)이름을 지정할 수도 있다.&lt;/p&gt;
&lt;p&gt;기계가 읽기 좋은 형태의 이름이라도 사람이 읽기에는 충분하다.&lt;/p&gt;
&lt;p&gt;몇몇 Field클래스들은 필수 인수가 필요하다. 예를 들어 Charfield의 경우 max_length를 입력해주어야 한다.  그리고 Field는 다양한 선택적 인수들을 가질 수 있다. 여기 예제에서는 default로 하여금 votes의 기본값을 0으로 선택하였다. &lt;/p&gt;
&lt;p&gt;그리고 ForeignKey를 사용한 관계설정이 있는데, 각각의 Choice가 하나의 Question에 관계된다는 것을 Django에 알려줌. Django는 다-대-일(many-to-one), 다대다(many-to-many), 일대일(One-to-one)과 같은 모든 일반 데이터베이스의 관계를 지원함.&lt;/p&gt;
&lt;h2 id=&quot;모델의-활성화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8%EC%9D%98-%ED%99%9C%EC%84%B1%ED%99%94&quot; aria-label=&quot;모델의 활성화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델의 활성화&lt;/h2&gt;
&lt;p&gt;모델에 대한 이 소량의 코드(아까적은 파이썬)가 , Django에게 상당한 양의 정보를 전달함.&lt;/p&gt;
&lt;p&gt;Django가 그 정보를 받아 하는 일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 앱을 위한 데이터베이스 스키마 생성(Create table문)&lt;/li&gt;
&lt;li&gt;Question과 Choice 객체에 접근하기 위한 Python 데이터베이스 접근 API를 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그러나 지금 가장 먼저 해야할 일은 프로젝트에게 Polls앱이 설치되어 있다는 것을 알려야 함.&lt;/p&gt;
&lt;p&gt;장고의 앱들은 분리되어 있어서 꼈다 뺐다를 할 수 있다. &lt;/p&gt;
&lt;p&gt;앱을 현재의 프로젝트에 포함시키기 위해서는 mysite/settings.py 파일 속에 installed_app에 &lt;/p&gt;
&lt;p&gt;‘polls.apps.PollsConfig’를 추가 해야 한다.&lt;/p&gt;
&lt;p&gt;이렇게 하면 Django가 polls앱이 포함 된 것을 알게 된다. &lt;/p&gt;
&lt;p&gt;$python manage.py makemigrations polls
makemigrations를 실행시킴으로써, 우리가 모델을 새로만든 사실과 이 사실을 migration에 저장시키고 싶다는 것을 django에게 알린 것이다. &lt;/p&gt;
&lt;p&gt;마이그레이션(Migration)은  모델 및 데이터베이스의 스키마에 대한 변경사항을 저장하는 방법이다. 원한다면 새로운 모델 마이그레이션을 읽을 수 있다.&lt;/p&gt;
&lt;p&gt;migrate : 우리를 위해 migration들을 실행시켜주고 자동으로 데이터베이스 스키마를 관리해주는 명령어&lt;/p&gt;
&lt;p&gt;sqlmigrate : migration이름을 인수로 받아 실행하는 SQL 문장을 보여줌.&lt;/p&gt;
&lt;p&gt;$ python manage.py sqlmigrate polls 0001&lt;/p&gt;
&lt;p&gt;python manage.py sqlmigrate polls 0001의 결과화면
지금 껏 알아본 모델 변경을 만드는데 세단계 지침은 다음과 같다.&lt;/p&gt;
&lt;p&gt;(  models.py에서) 모델을 변경한다.
Python manage.py makemigrations 를 통해 이 변경사항에 대한 마이그레이션을 만든다.
python manage.py migrate명령을 통해 변경사항을 데이터베이스에 적용한다.
API 가지고 놀기&lt;/p&gt;
&lt;p&gt;$python manage.py shell&lt;/p&gt;
&lt;p&gt;DJANGO&lt;em&gt;SETTINGS&lt;/em&gt;MODULE환경변수 때문에 python이라고 치지 않고 위의 명령대로 실행했다. 이렇게 입장을 하고 이것저것 쳐보면 Django에서 동작하는 모든 명령을 대화식 Python 쉘에서 그대로 시험 해 볼 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from polls.models import Choice, Question&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Question.objects.all()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;QuerySet []&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from django.utils import timezone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;q = Question(question&lt;em&gt;text=“What’s new?”, pub&lt;/em&gt;date=timezone.now())&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;q.save()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;q.id&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;q.question_text&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;“What’s new?”&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;q.pub_date&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;datetime.datetime(2020, 5, 1, 2, 46, 51, 523795, tzinfo=)&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;q.question_text = “What’s up?”
q.save()
Question.objects.all()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#x3C;QuerySet [Question: Question object(1)]&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;exit()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#x3C;QuerySet [Question: Question object(1)]&gt;은 이 객체를 표현하는 데 별로 도움이 되지 않는다. (polls/models.py파일의)Question모델을 수정하여, &lt;strong&gt;str&lt;/strong&gt;()메소드를 Question과 Choice에 추가하면 도움이 된다.&lt;/p&gt;
&lt;p&gt;polls/models.py&lt;/p&gt;
&lt;p&gt;from django.db import models&lt;/p&gt;
&lt;p&gt;class Question(models.Model):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  def __str__(self):

        return self.question_text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class Choice(models.Model):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  def __str__(self):

        return self.choice_text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리의 모델에 &lt;strong&gt;str&lt;/strong&gt;()메소드를 추가하는 것은 객체의 표현을 대화식 프롬프트에서 편하게 보려는 이유 말고도, Django가 자동으로 생성하는 관리 사이트에서도 객체의 표현이 사용되기 때문이다.&lt;/p&gt;
&lt;p&gt;또 모델에 커스텀 메소드를 하나 추가해본다.&lt;/p&gt;
&lt;p&gt;polls/models.py&lt;/p&gt;
&lt;p&gt;import datetime&lt;/p&gt;
&lt;p&gt;from django.db import models&lt;/p&gt;
&lt;p&gt;from django.utils import timezone&lt;/p&gt;
&lt;p&gt;class Question(models.Model):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  def was_published_recently(self):

        return self.pub_date &amp;gt;= timezone.now() - datetime.timedelta(days=1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;import datetime은 Python 의 표준 모듈인 datetime모듈을 참조하기 위해&lt;/p&gt;
&lt;p&gt;from django.utils import timezone은 Django의 시간대 관련 유틸리티인 django.utils.timezone을 참조하기 위해 추가 한 것이다.&lt;/p&gt;
&lt;p&gt;다시 &lt;/p&gt;
&lt;p&gt;$python manage.py shell&lt;/p&gt;
&lt;p&gt;을 하고 API에서 놀아보자&lt;/p&gt;
&lt;p&gt;API에서 이것저것 실험&lt;/p&gt;
&lt;h2 id=&quot;관리자-생성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EB%A6%AC%EC%9E%90-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;관리자 생성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관리자 생성하기&lt;/h2&gt;
&lt;p&gt;$python manage.py createsuperuser&lt;/p&gt;
&lt;p&gt;이렇게 하면&lt;/p&gt;
&lt;p&gt;username과 Email address와 Password를 2번 묻는다. 다 입력을 하면 슈퍼유저 계정이 생긴다.&lt;/p&gt;
&lt;h2 id=&quot;개발-서버-시작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C-%EC%84%9C%EB%B2%84-%EC%8B%9C%EC%9E%91&quot; aria-label=&quot;개발 서버 시작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발 서버 시작&lt;/h2&gt;
&lt;p&gt;$python manage.py runserver&lt;/p&gt;
&lt;p&gt;한 다음 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://127.0.0.1:8000/admin/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://127.0.0.1:8000/admin/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 으로 접근하면 유저네임과 비밀번호를 입력하라고 한다.&lt;/p&gt;
&lt;h2 id=&quot;관리자-사이트에-들어가기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EB%A6%AC%EC%9E%90-%EC%82%AC%EC%9D%B4%ED%8A%B8%EC%97%90-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0&quot; aria-label=&quot;관리자 사이트에 들어가기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관리자 사이트에 들어가기&lt;/h2&gt;
&lt;p&gt;앞에서 생성한 슈퍼유저계정으로 로그인을 하면 Django관리 인덱스 페이지가 보인다.&lt;/p&gt;
&lt;p&gt;편집 가능한 그룹과 사용자와 같은 몇 종류의 컨텐츠를 볼 수 있다. 이것들은 django.contrib.auth 모듈에서 제공되는데 , Django에서 제공되는 인증 프레임 워크이다.&lt;/p&gt;
&lt;p&gt;관리사이트에서 poll app을 변경가능하도록 만들기&lt;/p&gt;
&lt;p&gt;polls/admin.py&lt;/p&gt;
&lt;p&gt;from django.contrib import admin&lt;/p&gt;
&lt;p&gt;from .models import Question&lt;/p&gt;
&lt;p&gt;admin.site.register(Question)&lt;/p&gt;
&lt;p&gt;이제 polls Questions가 생겼다. 들어가보면 수정도 가능하고 히스토리도 볼 수 있다.!!&lt;/p&gt;
&lt;p&gt;이로써 튜토리얼 2장이 끝났다. &lt;/p&gt;
&lt;figure&gt;
	&lt;blockquote&gt;
		&lt;p&gt;
		 	특별한 것이 넘쳐나는 곳에선 특별하지 않는 것이 특별한 것이다.
		&lt;/p&gt;
		&lt;footer&gt;
			&lt;cite&gt;Youngbin Ha&lt;/cite&gt;
		&lt;/footer&gt;
	&lt;/blockquote&gt;
&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Perfect day for Perfecting something]]></title><description><![CDATA[아름 다운 이강산을 지키는 우리 사나이 기백으로 오늘을 산다. ]]></description><link>http://guseowhtjs1231.github.io//posts/perfecting-the-art-of-perfection</link><guid isPermaLink="false">http://guseowhtjs1231.github.io//posts/perfecting-the-art-of-perfection</guid><pubDate>Thu, 30 Apr 2020 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;Shoe me the code!!! We are in wecode!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/image-2.jpg&quot; alt=&quot;Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus&quot;&gt;&lt;/p&gt;
&lt;p&gt;왜 안되는 걸까… 궁금한데 제발 되라:stique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. &lt;/p&gt;
&lt;p&gt;Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Humane Typography in the Digital Age]]></title><description><![CDATA[An Essay on Typography by Eric Gill takes the reader back to the year 1930. The year when a conflict between two worlds came to its term. The machines of the industrial world finally took over the handicrafts.]]></description><link>http://guseowhtjs1231.github.io//posts/humane-typography-in-the-digital-age</link><guid isPermaLink="false">http://guseowhtjs1231.github.io//posts/humane-typography-in-the-digital-age</guid><pubDate>Sat, 19 Aug 2017 22:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-first-transition&quot;&gt;The first transition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-digital-age&quot;&gt;The digital age&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loss-of-humanity-through-transitions&quot;&gt;Loss of humanity through transitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chasing-perfection&quot;&gt;Chasing perfection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An Essay on Typography by Eric Gill takes the reader back to the year 1930. The year when a conflict between two worlds came to its term. The machines of the industrial world finally took over the handicrafts.&lt;/p&gt;
&lt;p&gt;The typography of this industrial age was no longer handcrafted. Mass production and profit became more important. Quantity mattered more than the quality. The books and printed works in general lost a part of its humanity. The typefaces were not produced by craftsmen anymore. It was the machines printing and tying the books together now. The craftsmen had to let go of their craft and became a cog in the process. An extension of the industrial machine.&lt;/p&gt;
&lt;p&gt;But the victory of the industrialism didn’t mean that the craftsmen were completely extinct. The two worlds continued to coexist independently. Each recognising the good in the other — the power of industrialism and the humanity of craftsmanship. This was the second transition that would strip typography of a part of its humanity. We have to go 500 years back in time to meet the first one.&lt;/p&gt;
&lt;h2 id=&quot;the-first-transition&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-first-transition&quot; aria-label=&quot;the first transition permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The first transition&lt;/h2&gt;
&lt;p&gt;A similar conflict emerged after the invention of the first printing press in Europe. Johannes Gutenberg invented movable type and used it to produce different compositions. His workshop could print up to 240 impressions per hour. Until then, the books were being copied by hand. All the books were handwritten and decorated with hand drawn ornaments and figures. A process of copying a book was long but each book, even a copy, was a work of art.&lt;/p&gt;
&lt;p&gt;The first printed books were, at first, perceived as inferior to the handwritten ones. They were smaller and cheaper to produce. Movable type provided the printers with flexibility that allowed them to print books in languages other than Latin. Gill describes the transition to industrialism as something that people needed and wanted. Something similar happened after the first printed books emerged. People wanted books in a language they understood and they wanted books they could take with them. They were hungry for knowledge and printed books satisfied this hunger.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/42-line-bible.jpg&quot; alt=&quot;42-line-bible.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The 42–Line Bible, printed by Gutenberg.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But, through this transition, the book lost a large part of its humanity. The machine took over most of the process but craftsmanship was still a part of it. The typefaces were cut manually by the first punch cutters. The paper was made by hand. The illustrations and ornaments were still being hand drawn. These were the remains of the craftsmanship that went almost extinct in the times of Eric Gill.&lt;/p&gt;
&lt;h2 id=&quot;the-digital-age&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-digital-age&quot; aria-label=&quot;the digital age permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The digital age&lt;/h2&gt;
&lt;p&gt;The first transition took away a large part of humanity from written communication. Industrialisation, the second transition described by Eric Gill, took away most of what was left. But it’s the third transition that stripped it naked. Typefaces are faceless these days. They’re just fonts on our computers. Hardly anyone knows their stories. Hardly anyone cares. Flicking through thousands of typefaces and finding the “right one” is a matter of minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the new computer age the proliferation of typefaces and type manipulations represents a new level of visual pollution threatening our culture. Out of thousands of typefaces, all we need are a few basic ones, and trash the rest.&lt;/p&gt;
&lt;p&gt;— Massimo Vignelli&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Typography is not about typefaces. It’s not about what looks best, it’s about what feels right. What communicates the message best. Typography, in its essence, is about the message. “Typographical design should perform optically what the speaker creates through voice and gesture of his thoughts.”, as El Lissitzky, a famous Russian typographer, put it.&lt;/p&gt;
&lt;h2 id=&quot;loss-of-humanity-through-transitions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#loss-of-humanity-through-transitions&quot; aria-label=&quot;loss of humanity through transitions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Loss of humanity through transitions&lt;/h2&gt;
&lt;p&gt;Each transition took away a part of humanity from written language. Handwritten books being the most humane form and the digital typefaces being the least. Overuse of Helvetica is a good example. Messages are being told in a typeface just because it’s a safe option. It’s always there. Everyone knows it but yet, nobody knows it. Stop someone on the street and ask him what Helvetica is? Ask a designer the same question. Ask him where it came from, when, why and who designed it. Most of them will fail to answer these questions. Most of them used it in their precious projects but they still don’t spot it in the street.&lt;/p&gt;
&lt;figure&gt;
	&lt;blockquote&gt;
		&lt;p&gt;Knowledge of the quality of a typeface is of the greatest importance for the functional, aesthetic and psychological effect.&lt;/p&gt;
		&lt;footer&gt;
			&lt;cite&gt;— Josef Mueller-Brockmann&lt;/cite&gt;
		&lt;/footer&gt;
	&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;Typefaces don’t look handmade these days. And that’s all right. They don’t have to. Industrialism took that away from them and we’re fine with it. We’ve traded that part of humanity for a process that produces more books that are easier to read. That can’t be bad. And it isn’t.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Humane typography will often be comparatively rough and even uncouth; but while a certain uncouthness does not seriously matter in humane works, uncouthness has no excuse whatever in the productions of the machine.&lt;/p&gt;
&lt;p&gt;— Eric Gill&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We’ve come close to “perfection” in the last five centuries. The letters are crisp and without rough edges. We print our compositions with high–precision printers on a high quality, machine made paper.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/type-through-time.jpg&quot; alt=&quot;type-through-time.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Type through 5 centuries.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We lost a part of ourselves because of this chase after perfection. We forgot about the craftsmanship along the way. And the worst part is that we don’t care. The transition to the digital age made that clear. We choose typefaces like clueless zombies. There’s no meaning in our work. Type sizes, leading, margins… It’s all just a few clicks or lines of code. The message isn’t important anymore. There’s no more “why” behind the “what”.&lt;/p&gt;
&lt;h2 id=&quot;chasing-perfection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chasing-perfection&quot; aria-label=&quot;chasing perfection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chasing perfection&lt;/h2&gt;
&lt;p&gt;Human beings aren’t perfect. Perfection is something that will always elude us. There will always be a small part of humanity in everything we do. No matter how small that part, we should make sure that it transcends the limits of the medium. We have to think about the message first. What typeface should we use and why? Does the typeface match the message and what we want to communicate with it? What will be the leading and why? Will there be more typefaces in our design? On what ground will they be combined? What makes our design unique and why? This is the part of humanity that is left in typography. It might be the last part. Are we really going to give it up?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published by &lt;a href=&quot;http://matejlatin.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Matej Latin&lt;/a&gt; on &lt;a href=&quot;https://medium.com/design-notes/humane-typography-in-the-digital-age-9bd5c16199bd?ref=webdesignernews.com#.lygo82z0x&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content:encoded></item></channel></rss>